<!doctype html>
<html>
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="/public/main.css">    
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css" integrity="sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l" crossorigin="anonymous">
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-Piv4xVNRyMGpqkS2by6br4gNJ7DXjqk09RmUpJ8jgGtD7zP9yug3goQfGII0yAns" crossorigin="anonymous"></script>
    <title>Hello, world!</title>
  </head>
  <body>
    <% if(user=="guest"||user==""){ %>
        <%- include('nav1.html') %>
    <% } else{ %>  
        <%- include('nav2.html') %>
    <% } %>
    <div class="container warmUp show" style="background-color: orange; margin-top: 5px;">
        <div class="row div-center" style="background-color: greenyellow;">
            <ul class="list"> 
                <li class="tab-button tab-active" onclick="init();" >올리고 내리고</li>
            </ul>
        </div>
        <ul>
            <div class="row div-center">
                <div class="camRect" style="background-color: skyblue;" >  
                    <div id="webcam-container"></div>                  
                    <div id="label-container"></div>
                </div>
                <div class="camRect" style="background-color: rgb(233, 231, 203);">  
                    <img id="com_rsp">                 
                    <div id="label-container"></div>
                </div>
            </div>            
        </ul>            
        <div class="mt-2 div-center">
            <button class="ui primary button" id="capture">Start</button>
            <button class="ui button" id="stop">Stop</button>
            <button type="submit" class="btn btn-primary" style="max-width: 350px;">내 기록을 서버에 저장하기</button>
        </div>
        <div class="mt-2 div-center">   
            <p style="width: 300px;">내 기록은 [내 정보]에서 확인할 수 있어요.</p>
        </div>
        <div class="container-lg cntbox" style="background-color: cadetblue; max-width: 300px;" >
            <table class="table" style="background-color: bisque;">
                <tr class="div-center">
                    <td>성공 : <span id="o_cnt">0</span>개</td>
                </tr>

            </table>   
        </div>
    </div>

<script>
    var sports = 0;
    let URL = "https://teachablemachine.withgoogle.com/models/DASF6BItw/"
    init()

    let model, webcam, ctx, labelContainer, maxPredictions;
    var status = "";
    var o_cnt = 0;
    async function init() {
    const modelURL = URL + "model.json";
    const metadataURL = URL + "metadata.json";

    // load the model and metadata
    // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
    // Note: the pose library adds a tmPose object to your window (window.tmPose)
    model = await tmPose.load(modelURL, metadataURL);
    maxPredictions = model.getTotalClasses();

    // Convenience function to setup a webcam
    const size = 300;
    const flip = true; // whether to flip the webcam
    webcam = new tmPose.Webcam(size, size, flip); // width, height, flip
    await webcam.setup(); // request access to the webcam
    await webcam.play();
    window.requestAnimationFrame(loop);

    // append/get elements to the DOM
    const canvas = document.getElementById("canvas");
    canvas.width = size; canvas.height = size;
    ctx = canvas.getContext("2d");
    labelContainer = document.getElementById("label-container");
    for (let i = 0; i < maxPredictions; i++) { // and class labels
        labelContainer.appendChild(document.createElement("div"));
    }
    }

    async function loop(timestamp) {
    webcam.update(); // update the webcam frame
    await predict();
    window.requestAnimationFrame(loop);
    }

    async function predict() {
    // Prediction #1: run input through posenet
    // estimatePose can take in an image, video or canvas html element
    const { pose, posenetOutput } = await model.estimatePose(webcam.canvas);
    // Prediction 2: run input through teachable machine classification model
    const prediction = await model.predict(posenetOutput);
    if (prediction[0].probability.toFixed(2) > 0.999) {
            if (status == "action2") {
                cnt_up();
            }
            status = "action1"
        } else if (prediction[1].probability.toFixed(2) > 0.999) {
            status = "action2"
        }
    // for (let i = 0; i < maxPredictions; i++) {
    //     const classPrediction =
    //         prediction[i].className + ": " + prediction[i].probability.toFixed(2);
    //     labelContainer.childNodes[i].innerHTML = classPrediction;
    // }

    // finally draw the poses
    drawPose(pose);
    }

    function cnt_up() {
        o_cnt++
    }

    function throwQuiz() {
        
    }
    function showImage() {
        var imgArray=new Array(); 
        imgArray[0]="/public/rock.png"; 
        imgArray[1]="/public/ssissor.png"; 
        imgArray[2]="/public/paper.png"; 
        function showImage(){ 
            var imgNum=Math.round(Math.random()*2); 
            var objImg=document.getElementById("com_rsp"); 
            objImg.src=imgArray[imgNum]; setTimeout(showImage,200); 
        } 
    }

    var countArray=new Array(); 
    countArray[0]="/public/count_3.png"; 
    countArray[1]="/public/count_2.png"; 
    countArray[2]="/public/count_1.png"; 
    var imgNum = 3
    async function countDown() {
        var imgNum = 2
        var objImg=document.getElementById("com_rsp"); 
        while(imgNum >= 0){
            objImg.src = countArray[imgNum]; 
            sleep(1000);
            imgNum--
    }};

    function throwQuiz(){ 
        var imgNum=Math.round(Math.random()*2); 
        var objImg=document.getElementById("com_rsp"); 
        objImg.src=countArray[imgNum]; setTimeout(showImage,200); 
    } ;
    

    function drawPose(pose) {
    if (webcam.canvas) {
        ctx.drawImage(webcam.canvas, 0, 0);
        // draw the keypoints and skeleton
        if (pose) {
            const minPartConfidence = 0.5;
            tmPose.drawKeypoints(pose.keypoints, minPartConfidence, ctx);
            tmPose.drawSkeleton(pose.keypoints, minPartConfidence, ctx);
        }
    }
    }
    </script>

    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@teachablemachine/pose@0.8/dist/teachablemachine-pose.min.js"></script>

  </body>
</html>