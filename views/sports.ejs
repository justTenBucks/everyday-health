<!doctype html>
<html>
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">


    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="/public/main.css">    
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css" integrity="sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l" crossorigin="anonymous">
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-Piv4xVNRyMGpqkS2by6br4gNJ7DXjqk09RmUpJ8jgGtD7zP9yug3goQfGII0yAns" crossorigin="anonymous"></script>
    
    <title>Hello, world!</title>
  </head>
  <body>

    <% if(user=="guest"||user==""){ %>
        <%- include('nav1.html') %>
    <% } else{ %>  
        <%- include('nav2.html') %>
    <% } %>

    <div class="container warmUp show" style="background-color: orange; margin-top: 5px;">
        <div class="row div-center" style="background-color: greenyellow;">
            <ul class="list"> 
                <li class="tab-button">수영</li>
                <li class="tab-button">복싱</li>
                <li class="tab-button">탁구</li>
                <li class="tab-button">스키</li>
            </ul>
        </div>
        <div class="row div-center">
            <div class="camRect" style="background-color: skyblue;">
                <canvas id="canvas"></canvas>
                <div id="label-container"></div>
            </div>
        </div>
            <div class="mt-2 div-center">
                <button class="btn btn-primary" id="save_sports" style="width: 300px;" onclick = "return post_to_url('/save_sports', 
                {userID:ID, swim_cnt:cnt_list[0], boxing_cnt:cnt_list[1], pingpong_cnt:cnt_list[2], ski_cnt:cnt_list[3]});">내 기록을 서버에 저장하기</button>
            </div>
            <div class="mt-2 div-center">   
                <p style="width: 300px;">내 기록은 [내 정보]에서 확인할 수 있어요.</p>
            </div>
            <div class="container-lg cntbox" style="background-color: cadetblue; max-width: 300px;" >
                <table class="table" style="background-color: bisque;">
                    <tr>
                        <td>수영 : <span id="swim_cnt" name="swim_cnt">0</span>개</td>
                        <td>복싱 : <span id="boxing_cnt" name="boxing_cnt">0</span>개</td>
                    </tr>
                    <tr>
                        <td>탁구 : <span id="pingpong_cnt" name="pingpong_cnt">0</span>개</td>
                        <td>스키 : <span id="ski_cnt" name="ski_cnt">0</span>개</td>
                        
                    </tr>
                </table>   
            </div>
    </div>


    
<script>
    var sports = 0;
    let URL
    const URL_list = ["https://teachablemachine.withgoogle.com/models/jxWrVCqvW/",
    "https://teachablemachine.withgoogle.com/models/h6b92qcnU/",
    "https://teachablemachine.withgoogle.com/models/ut4QQJYv-/",
    "https://teachablemachine.withgoogle.com/models/AvY9FxyCS/"];    
    for (let i = 0; i < 4; i++) {
    $(".tab-button").eq(i).click(function(){
        $(".tab-button").removeClass('tab-active');
        $(".tab-content").removeClass('show');
        $(".tab-button").eq(i).addClass('tab-active');
        $(".tab-content").eq(i).addClass('show');
        URL = URL_list[i];
        sports = i;
        init()
    })}   
    // let URL = "https://teachablemachine.withgoogle.com/models/TKor61fJv/";


    let model, webcam, ctx, labelContainer, maxPredictions;
    var status = "";
    var count = 0;
    var cnt_list = [0,0,0,0];
    async function init() {
    const modelURL = URL + "model.json";
    const metadataURL = URL + "metadata.json";

    // load the model and metadata
    // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
    // Note: the pose library adds a tmPose object to your window (window.tmPose)
    model = await tmPose.load(modelURL, metadataURL);
    maxPredictions = model.getTotalClasses();

    // Convenience function to setup a webcam
    const size = 300;
    const flip = true; // whether to flip the webcam
    webcam = new tmPose.Webcam(size, size, flip); // width, height, flip
    await webcam.setup(); // request access to the webcam
    await webcam.play();
    window.requestAnimationFrame(loop);

    // append/get elements to the DOM
    const canvas = document.getElementById("canvas");
    canvas.width = size; canvas.height = size;
    ctx = canvas.getContext("2d");
    labelContainer = document.getElementById("label-container");
    for (let i = 0; i < maxPredictions; i++) { // and class labels
        labelContainer.appendChild(document.createElement("div"));
    }
    }

    async function loop(timestamp) {
        webcam.update(); // update the webcam frame
        await predict();
        window.requestAnimationFrame(loop);
    }

    async function predict() {
    // Prediction #1: run input through posenet
    // estimatePose can take in an image, video or canvas html element
    const { pose, posenetOutput } = await model.estimatePose(webcam.canvas);
    // Prediction 2: run input through teachable machine classification model
    const prediction = await model.predict(posenetOutput);
    if (prediction[0].probability.toFixed(2) > 0.999) {
            if (status == "action2") {
                cnt_up(sports);
            }
            status = "action1"
        } else if (prediction[1].probability.toFixed(2) > 0.999) {
            status = "action2"
        }
    // for (let i = 0; i < maxPredictions; i++) {
    //     const classPrediction =
    //         prediction[i].className + ": " + prediction[i].probability.toFixed(2);
    //     labelContainer.childNodes[i].innerHTML = classPrediction;
    // }

    // finally draw the poses
    drawPose(pose);
    }

    function cnt_up(sports) {
        cnt_list[sports]++
        if (sports == 0){
            $("#swim_cnt").html(cnt_list[sports]);
        } else if (sports == 1){
            $("#boxing_cnt").html(cnt_list[sports]);
        } else if (sports == 2){
            $("#pingpong_cnt").html(cnt_list[sports]);
        } else if (sports == 3){
            $("#ski_cnt").html(cnt_list[sports]);
        }
        
    }
    function drawPose(pose) {
    if (webcam.canvas) {
        ctx.drawImage(webcam.canvas, 0, 0);
        // draw the keypoints and skeleton
        if (pose) {
            const minPartConfidence = 0.5;
            tmPose.drawKeypoints(pose.keypoints, minPartConfidence, ctx);
            tmPose.drawSkeleton(pose.keypoints, minPartConfidence, ctx);
        }
    }
    }

    let ID = "<%= user %>"
    function post_to_url(path, params, method) {
        if (ID=="guest" || ""){
            alert("로그인이 필요합니다.")
        } else {
        method = method || "post"; // Set method to post by default, if not specified.
        // The rest of this code assumes you are not using a library.
        // It can be made less wordy if you use one.
        var form = document.createElement("form");
        form.setAttribute("method", method);
        form.setAttribute("action", path);
        for(var key in params) {
            var hiddenField = document.createElement("input");
            hiddenField.setAttribute("type", "hidden");
            hiddenField.setAttribute("name", key);
            hiddenField.setAttribute("value", params[key]);
            form.appendChild(hiddenField);
        }
        document.body.appendChild(form);
        form.submit();
    }
}
 

    </script>

    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@teachablemachine/pose@0.8/dist/teachablemachine-pose.min.js"></script>

  </body>
</html>