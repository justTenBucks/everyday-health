<!doctype html>
<html>
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->    
    <link rel="stylesheet" href="/public/main.css">    
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css" integrity="sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l" crossorigin="anonymous">
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-Piv4xVNRyMGpqkS2by6br4gNJ7DXjqk09RmUpJ8jgGtD7zP9yug3goQfGII0yAns" crossorigin="anonymous"></script>
    <title>Hello, world!</title>
</head>
<body>
    <%- include('nav.html') %>
    <div class="container warmUp show" style="background-color: orange; margin-top: 5px;">
        <div class="row div-center" style="background-color: greenyellow;">
            <ul class="list"> 
                <li class="tab-button tab-active" onclick="init()">시작하기</li>
            </ul>
        </div>
        <div class="row div-center">
            <div class="camRect" style="background-color: skyblue;">  
                <div id="webcam-container"></div>                  
                <div id="label-container"></div>
            </div>
        </div>
        <div class="mt-2 div-center">
            <button type="submit" class="btn btn-primary" style="max-width: 350px;">내 기록을 서버에 저장하기</button>
        </div>
        <div class="mt-2 div-center">   
            <p style="width: 300px;">내 기록은 [내 정보]에서 확인할 수 있어요.</p>
        </div>
        <div class="container" style="background-color: rgb(178, 207, 180); max-width: 350px;" >
            <table class="table" style="background-color: bisque;">
                <tr>
                    <td>가위: <span id="scissor">0</span>%</td>
                    <td>바위: <span id="rock">0</span>%</td>
                    <td>보: <span id="paper">0</span>%</td>
                </tr>
            </table>          
        </div>        
        <div class="container" style="background-color: cadetblue; max-width: 350px;" >
            <table class="table" style="background-color: bisque;">
                <tr>
                    <td>승 : <span id="win_cnt">0</span>개</td>
                    <td>무 : <span id="draw_cnt">0</span>개</td>
                    <td>패 : <span id="lose_cnt">0</span>개</td>
                </tr>
            </table>          
        </div>
    </div>
</body>
</html>
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@0.8/dist/teachablemachine-image.min.js"></script>
<script type="text/javascript">
    // More API functions here:
    // https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/image

    // the link to your model provided by Teachable Machine export panel
    const URL = "https://teachablemachine.withgoogle.com/models/wmiQKbnz9/";

    let model, webcam, labelContainer, maxPredictions;

    // Load the image model and setup the webcam
    async function init() {
        const modelURL = URL + "model.json";
        const metadataURL = URL + "metadata.json";

        // load the model and metadata
        // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
        // or files from your local hard drive
        // Note: the pose library adds "tmImage" object to your window (window.tmImage)
        model = await tmImage.load(modelURL, metadataURL);
        maxPredictions = model.getTotalClasses();

        // Convenience function to setup a webcam
        const flip = true; // whether to flip the webcam
        const size = 300;
        webcam = new tmImage.Webcam(size, size, flip); // width, height, flip
        await webcam.setup(); // request access to the webcam
        await webcam.play();
        window.requestAnimationFrame(loop);

        // append elements to the DOM
        document.getElementById("webcam-container").appendChild(webcam.canvas);
        labelContainer = document.getElementById("label-container");
        for (let i = 0; i < maxPredictions; i++) { // and class labels
            labelContainer.appendChild(document.createElement("div"));
        }
    }

    async function loop() {
        webcam.update(); // update the webcam frame
        await predict();
        window.requestAnimationFrame(loop);
    }

    // run the webcam image through the image model
    async function predict() {
        const prediction = await model.predict(webcam.canvas);
        const recog_per = ["#scissor", '#rock', '#paper']
        for (let i = 0; i < maxPredictions; i++) {
            const classPrediction = prediction[i].probability.toFixed(2) * 100;
            $(recog_per[i]).html(classPrediction);
    }}
</script>
